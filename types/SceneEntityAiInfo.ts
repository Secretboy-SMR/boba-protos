// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,output_typescript,// @generated from protobuf file "SceneEntityAiInfo.proto" (syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServantInfo } from "./ServantInfo";
import { Vector } from "./Vector";
/**
 * @generated from protobuf message SceneEntityAiInfo
 */
export interface SceneEntityAiInfo {
    /**
     * @generated from protobuf field: bool is_ai_open = 1;
     */
    isAiOpen: boolean;
    /**
     * @generated from protobuf field: Vector born_pos = 2;
     */
    bornPos?: Vector;
    /**
     * @generated from protobuf field: map<uint32, uint32> skill_cd_map = 3;
     */
    skillCdMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: ServantInfo servant_info = 4;
     */
    servantInfo?: ServantInfo;
    /**
     * @generated from protobuf field: map<uint32, uint32> ai_threat_map = 5;
     */
    aiThreatMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint32, uint32> skill_group_cd_map = 6;
     */
    skillGroupCdMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: uint32 cur_tactic = 7;
     */
    curTactic: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntityAiInfo$Type extends MessageType<SceneEntityAiInfo> {
    constructor() {
        super("SceneEntityAiInfo", [
            { no: 1, name: "is_ai_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "born_pos", kind: "message", T: () => Vector },
            { no: 3, name: "skill_cd_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 4, name: "servant_info", kind: "message", T: () => ServantInfo },
            { no: 5, name: "ai_threat_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 6, name: "skill_group_cd_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "cur_tactic", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneEntityAiInfo>): SceneEntityAiInfo {
        const message = { isAiOpen: false, skillCdMap: {}, aiThreatMap: {}, skillGroupCdMap: {}, curTactic: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntityAiInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntityAiInfo): SceneEntityAiInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_ai_open */ 1:
                    message.isAiOpen = reader.bool();
                    break;
                case /* Vector born_pos */ 2:
                    message.bornPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.bornPos);
                    break;
                case /* map<uint32, uint32> skill_cd_map */ 3:
                    this.binaryReadMap3(message.skillCdMap, reader, options);
                    break;
                case /* ServantInfo servant_info */ 4:
                    message.servantInfo = ServantInfo.internalBinaryRead(reader, reader.uint32(), options, message.servantInfo);
                    break;
                case /* map<uint32, uint32> ai_threat_map */ 5:
                    this.binaryReadMap5(message.aiThreatMap, reader, options);
                    break;
                case /* map<uint32, uint32> skill_group_cd_map */ 6:
                    this.binaryReadMap6(message.skillGroupCdMap, reader, options);
                    break;
                case /* uint32 cur_tactic */ 7:
                    message.curTactic = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: SceneEntityAiInfo["skillCdMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneEntityAiInfo["skillCdMap"] | undefined, val: SceneEntityAiInfo["skillCdMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field SceneEntityAiInfo.skill_cd_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap5(map: SceneEntityAiInfo["aiThreatMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneEntityAiInfo["aiThreatMap"] | undefined, val: SceneEntityAiInfo["aiThreatMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field SceneEntityAiInfo.ai_threat_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap6(map: SceneEntityAiInfo["skillGroupCdMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneEntityAiInfo["skillGroupCdMap"] | undefined, val: SceneEntityAiInfo["skillGroupCdMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field SceneEntityAiInfo.skill_group_cd_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: SceneEntityAiInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_ai_open = 1; */
        if (message.isAiOpen !== false)
            writer.tag(1, WireType.Varint).bool(message.isAiOpen);
        /* Vector born_pos = 2; */
        if (message.bornPos)
            Vector.internalBinaryWrite(message.bornPos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> skill_cd_map = 3; */
        for (let k of Object.keys(message.skillCdMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.skillCdMap[k as any]).join();
        /* ServantInfo servant_info = 4; */
        if (message.servantInfo)
            ServantInfo.internalBinaryWrite(message.servantInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> ai_threat_map = 5; */
        for (let k of Object.keys(message.aiThreatMap))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.aiThreatMap[k as any]).join();
        /* map<uint32, uint32> skill_group_cd_map = 6; */
        for (let k of Object.keys(message.skillGroupCdMap))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.skillGroupCdMap[k as any]).join();
        /* uint32 cur_tactic = 7; */
        if (message.curTactic !== 0)
            writer.tag(7, WireType.Varint).uint32(message.curTactic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SceneEntityAiInfo
 */
export const SceneEntityAiInfo = new SceneEntityAiInfo$Type();
