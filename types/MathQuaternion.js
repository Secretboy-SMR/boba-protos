// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,output_javascript,// @generated from protobuf file "MathQuaternion.proto" (syntax proto3),// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class MathQuaternion$Type extends MessageType {
    constructor() {
        super("MathQuaternion", [
            { no: 1, name: "X", kind: "scalar", jsonName: "X", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "Y", kind: "scalar", jsonName: "Y", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "Z", kind: "scalar", jsonName: "Z", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "W", kind: "scalar", jsonName: "W", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value) {
        const message = { x: 0, y: 0, z: 0, w: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float X = 1 [json_name = "X"];*/ 1:
                    message.x = reader.float();
                    break;
                case /* float Y = 2 [json_name = "Y"];*/ 2:
                    message.y = reader.float();
                    break;
                case /* float Z = 3 [json_name = "Z"];*/ 3:
                    message.z = reader.float();
                    break;
                case /* float W = 4 [json_name = "W"];*/ 4:
                    message.w = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* float X = 1 [json_name = "X"]; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit32).float(message.x);
        /* float Y = 2 [json_name = "Y"]; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit32).float(message.y);
        /* float Z = 3 [json_name = "Z"]; */
        if (message.z !== 0)
            writer.tag(3, WireType.Bit32).float(message.z);
        /* float W = 4 [json_name = "W"]; */
        if (message.w !== 0)
            writer.tag(4, WireType.Bit32).float(message.w);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathQuaternion
 */
export const MathQuaternion = new MathQuaternion$Type();
