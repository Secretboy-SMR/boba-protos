// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,output_javascript,// @generated from protobuf file "PropValue.proto" (syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PropValue
 */
export interface PropValue {
    /**
     * @generated from protobuf oneof: Value
     */
    value: {
        oneofKind: "ival";
        /**
         * @generated from protobuf field: int64 ival = 2;
         */
        ival: bigint;
    } | {
        oneofKind: "fval";
        /**
         * @generated from protobuf field: float fval = 3;
         */
        fval: number;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: uint32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: int64 val = 4;
     */
    val: bigint;
}
declare class PropValue$Type extends MessageType<PropValue> {
    constructor();
    create(value?: PartialMessage<PropValue>): PropValue;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PropValue): PropValue;
    internalBinaryWrite(message: PropValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message PropValue
 */
export declare const PropValue: PropValue$Type;
export {};
