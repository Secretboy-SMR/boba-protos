// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,output_javascript,// @generated from protobuf file "Equip.proto" (syntax proto3),// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Weapon } from "./Weapon";
import { Reliquary } from "./Reliquary";
// @generated message type with reflection information, may provide speed optimized methods
class Equip$Type extends MessageType {
    constructor() {
        super("Equip", [
            { no: 1, name: "reliquary", kind: "message", oneof: "detail", T: () => Reliquary },
            { no: 2, name: "weapon", kind: "message", oneof: "detail", T: () => Weapon },
            { no: 3, name: "is_locked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { detail: { oneofKind: undefined }, isLocked: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Reliquary reliquary */ 1:
                    message.detail = {
                        oneofKind: "reliquary",
                        reliquary: Reliquary.internalBinaryRead(reader, reader.uint32(), options, message.detail.reliquary)
                    };
                    break;
                case /* Weapon weapon */ 2:
                    message.detail = {
                        oneofKind: "weapon",
                        weapon: Weapon.internalBinaryRead(reader, reader.uint32(), options, message.detail.weapon)
                    };
                    break;
                case /* bool is_locked */ 3:
                    message.isLocked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Reliquary reliquary = 1; */
        if (message.detail.oneofKind === "reliquary")
            Reliquary.internalBinaryWrite(message.detail.reliquary, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Weapon weapon = 2; */
        if (message.detail.oneofKind === "weapon")
            Weapon.internalBinaryWrite(message.detail.weapon, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool is_locked = 3; */
        if (message.isLocked !== false)
            writer.tag(3, WireType.Varint).bool(message.isLocked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Equip
 */
export const Equip = new Equip$Type();
