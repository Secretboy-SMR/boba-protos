// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,output_typescript,// @generated from protobuf file "AvatarInfo.proto" (syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AvatarExcelInfo } from "./AvatarExcelInfo";
import { AvatarEquipAffixInfo } from "./AvatarEquipAffixInfo";
import { AvatarExpeditionState } from "./AvatarExpeditionState";
import { AvatarFetterInfo } from "./AvatarFetterInfo";
import { AvatarSkillInfo } from "./AvatarSkillInfo";
import { TrialAvatarInfo } from "./TrialAvatarInfo";
import { PropValue } from "./PropValue";
/**
 * @generated from protobuf message AvatarInfo
 */
export interface AvatarInfo {
    /**
     * @generated from protobuf field: uint32 avatar_id = 1;
     */
    avatarId: number;
    /**
     * @generated from protobuf field: uint64 guid = 2;
     */
    guid: bigint;
    /**
     * @generated from protobuf field: map<uint32, PropValue> prop_map = 3;
     */
    propMap: {
        [key: number]: PropValue;
    };
    /**
     * @generated from protobuf field: uint32 life_state = 4;
     */
    lifeState: number;
    /**
     * @generated from protobuf field: repeated uint64 equip_guid_list = 5;
     */
    equipGuidList: bigint[];
    /**
     * @generated from protobuf field: repeated uint32 talent_id_list = 6;
     */
    talentIdList: number[];
    /**
     * @generated from protobuf field: map<uint32, float> fight_prop_map = 7;
     */
    fightPropMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: TrialAvatarInfo trial_avatar_info = 9;
     */
    trialAvatarInfo?: TrialAvatarInfo;
    /**
     * @generated from protobuf field: map<uint32, AvatarSkillInfo> skill_map = 10;
     */
    skillMap: {
        [key: number]: AvatarSkillInfo;
    };
    /**
     * @generated from protobuf field: uint32 skill_depot_id = 11;
     */
    skillDepotId: number;
    /**
     * @generated from protobuf field: AvatarFetterInfo fetter_info = 12;
     */
    fetterInfo?: AvatarFetterInfo;
    /**
     * @generated from protobuf field: uint32 core_proud_skill_level = 13;
     */
    coreProudSkillLevel: number;
    /**
     * @generated from protobuf field: repeated uint32 inherent_proud_skill_list = 14;
     */
    inherentProudSkillList: number[];
    /**
     * @generated from protobuf field: map<uint32, uint32> skill_level_map = 15;
     */
    skillLevelMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: AvatarExpeditionState expedition_state = 16;
     */
    expeditionState: AvatarExpeditionState;
    /**
     * @generated from protobuf field: map<uint32, uint32> proud_skill_extra_level_map = 17;
     */
    proudSkillExtraLevelMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: bool is_focus = 18;
     */
    isFocus: boolean;
    /**
     * @generated from protobuf field: uint32 avatar_type = 19;
     */
    avatarType: number;
    /**
     * @generated from protobuf field: repeated uint32 team_resonance_list = 20;
     */
    teamResonanceList: number[];
    /**
     * @generated from protobuf field: uint32 wearing_flycloak_id = 21;
     */
    wearingFlycloakId: number;
    /**
     * @generated from protobuf field: repeated AvatarEquipAffixInfo equip_affix_list = 22;
     */
    equipAffixList: AvatarEquipAffixInfo[];
    /**
     * @generated from protobuf field: uint32 born_time = 23;
     */
    bornTime: number;
    /**
     * @generated from protobuf field: repeated uint32 pending_promote_reward_list = 24;
     */
    pendingPromoteRewardList: number[];
    /**
     * @generated from protobuf field: uint32 costume_id = 25;
     */
    costumeId: number;
    /**
     * @generated from protobuf field: AvatarExcelInfo excel_info = 26;
     */
    excelInfo?: AvatarExcelInfo;
    /**
     * @generated from protobuf field: uint32 anim_hash = 27;
     */
    animHash: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class AvatarInfo$Type extends MessageType<AvatarInfo> {
    constructor() {
        super("AvatarInfo", [
            { no: 1, name: "avatar_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "guid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "prop_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => PropValue } },
            { no: 4, name: "life_state", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "equip_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "talent_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "fight_prop_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 2 /*ScalarType.FLOAT*/ } },
            { no: 9, name: "trial_avatar_info", kind: "message", T: () => TrialAvatarInfo },
            { no: 10, name: "skill_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => AvatarSkillInfo } },
            { no: 11, name: "skill_depot_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "fetter_info", kind: "message", T: () => AvatarFetterInfo },
            { no: 13, name: "core_proud_skill_level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "inherent_proud_skill_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "skill_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 16, name: "expedition_state", kind: "enum", T: () => ["AvatarExpeditionState", AvatarExpeditionState] },
            { no: 17, name: "proud_skill_extra_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 18, name: "is_focus", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "avatar_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 20, name: "team_resonance_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 21, name: "wearing_flycloak_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 22, name: "equip_affix_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AvatarEquipAffixInfo },
            { no: 23, name: "born_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 24, name: "pending_promote_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 25, name: "costume_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 26, name: "excel_info", kind: "message", T: () => AvatarExcelInfo },
            { no: 27, name: "anim_hash", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AvatarInfo>): AvatarInfo {
        const message = { avatarId: 0, guid: 0n, propMap: {}, lifeState: 0, equipGuidList: [], talentIdList: [], fightPropMap: {}, skillMap: {}, skillDepotId: 0, coreProudSkillLevel: 0, inherentProudSkillList: [], skillLevelMap: {}, expeditionState: 0, proudSkillExtraLevelMap: {}, isFocus: false, avatarType: 0, teamResonanceList: [], wearingFlycloakId: 0, equipAffixList: [], bornTime: 0, pendingPromoteRewardList: [], costumeId: 0, animHash: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AvatarInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AvatarInfo): AvatarInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 avatar_id */ 1:
                    message.avatarId = reader.uint32();
                    break;
                case /* uint64 guid */ 2:
                    message.guid = reader.uint64().toBigInt();
                    break;
                case /* map<uint32, PropValue> prop_map */ 3:
                    this.binaryReadMap3(message.propMap, reader, options);
                    break;
                case /* uint32 life_state */ 4:
                    message.lifeState = reader.uint32();
                    break;
                case /* repeated uint64 equip_guid_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.equipGuidList.push(reader.uint64().toBigInt());
                    else
                        message.equipGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* repeated uint32 talent_id_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.talentIdList.push(reader.uint32());
                    else
                        message.talentIdList.push(reader.uint32());
                    break;
                case /* map<uint32, float> fight_prop_map */ 7:
                    this.binaryReadMap7(message.fightPropMap, reader, options);
                    break;
                case /* TrialAvatarInfo trial_avatar_info */ 9:
                    message.trialAvatarInfo = TrialAvatarInfo.internalBinaryRead(reader, reader.uint32(), options, message.trialAvatarInfo);
                    break;
                case /* map<uint32, AvatarSkillInfo> skill_map */ 10:
                    this.binaryReadMap10(message.skillMap, reader, options);
                    break;
                case /* uint32 skill_depot_id */ 11:
                    message.skillDepotId = reader.uint32();
                    break;
                case /* AvatarFetterInfo fetter_info */ 12:
                    message.fetterInfo = AvatarFetterInfo.internalBinaryRead(reader, reader.uint32(), options, message.fetterInfo);
                    break;
                case /* uint32 core_proud_skill_level */ 13:
                    message.coreProudSkillLevel = reader.uint32();
                    break;
                case /* repeated uint32 inherent_proud_skill_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.inherentProudSkillList.push(reader.uint32());
                    else
                        message.inherentProudSkillList.push(reader.uint32());
                    break;
                case /* map<uint32, uint32> skill_level_map */ 15:
                    this.binaryReadMap15(message.skillLevelMap, reader, options);
                    break;
                case /* AvatarExpeditionState expedition_state */ 16:
                    message.expeditionState = reader.int32();
                    break;
                case /* map<uint32, uint32> proud_skill_extra_level_map */ 17:
                    this.binaryReadMap17(message.proudSkillExtraLevelMap, reader, options);
                    break;
                case /* bool is_focus */ 18:
                    message.isFocus = reader.bool();
                    break;
                case /* uint32 avatar_type */ 19:
                    message.avatarType = reader.uint32();
                    break;
                case /* repeated uint32 team_resonance_list */ 20:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.teamResonanceList.push(reader.uint32());
                    else
                        message.teamResonanceList.push(reader.uint32());
                    break;
                case /* uint32 wearing_flycloak_id */ 21:
                    message.wearingFlycloakId = reader.uint32();
                    break;
                case /* repeated AvatarEquipAffixInfo equip_affix_list */ 22:
                    message.equipAffixList.push(AvatarEquipAffixInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 born_time */ 23:
                    message.bornTime = reader.uint32();
                    break;
                case /* repeated uint32 pending_promote_reward_list */ 24:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.pendingPromoteRewardList.push(reader.uint32());
                    else
                        message.pendingPromoteRewardList.push(reader.uint32());
                    break;
                case /* uint32 costume_id */ 25:
                    message.costumeId = reader.uint32();
                    break;
                case /* AvatarExcelInfo excel_info */ 26:
                    message.excelInfo = AvatarExcelInfo.internalBinaryRead(reader, reader.uint32(), options, message.excelInfo);
                    break;
                case /* uint32 anim_hash */ 27:
                    message.animHash = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: AvatarInfo["propMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AvatarInfo["propMap"] | undefined, val: AvatarInfo["propMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = PropValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field AvatarInfo.prop_map");
            }
        }
        map[key ?? 0] = val ?? PropValue.create();
    }
    private binaryReadMap7(map: AvatarInfo["fightPropMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AvatarInfo["fightPropMap"] | undefined, val: AvatarInfo["fightPropMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.float();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field AvatarInfo.fight_prop_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap10(map: AvatarInfo["skillMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AvatarInfo["skillMap"] | undefined, val: AvatarInfo["skillMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = AvatarSkillInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field AvatarInfo.skill_map");
            }
        }
        map[key ?? 0] = val ?? AvatarSkillInfo.create();
    }
    private binaryReadMap15(map: AvatarInfo["skillLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AvatarInfo["skillLevelMap"] | undefined, val: AvatarInfo["skillLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field AvatarInfo.skill_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap17(map: AvatarInfo["proudSkillExtraLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AvatarInfo["proudSkillExtraLevelMap"] | undefined, val: AvatarInfo["proudSkillExtraLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field AvatarInfo.proud_skill_extra_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: AvatarInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 avatar_id = 1; */
        if (message.avatarId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.avatarId);
        /* uint64 guid = 2; */
        if (message.guid !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.guid);
        /* map<uint32, PropValue> prop_map = 3; */
        for (let k of Object.keys(message.propMap)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            PropValue.internalBinaryWrite(message.propMap[k as any], writer, options);
            writer.join().join();
        }
        /* uint32 life_state = 4; */
        if (message.lifeState !== 0)
            writer.tag(4, WireType.Varint).uint32(message.lifeState);
        /* repeated uint64 equip_guid_list = 5; */
        if (message.equipGuidList.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.equipGuidList.length; i++)
                writer.uint64(message.equipGuidList[i]);
            writer.join();
        }
        /* repeated uint32 talent_id_list = 6; */
        if (message.talentIdList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.talentIdList.length; i++)
                writer.uint32(message.talentIdList[i]);
            writer.join();
        }
        /* map<uint32, float> fight_prop_map = 7; */
        for (let k of Object.keys(message.fightPropMap))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Bit32).float(message.fightPropMap[k as any]).join();
        /* TrialAvatarInfo trial_avatar_info = 9; */
        if (message.trialAvatarInfo)
            TrialAvatarInfo.internalBinaryWrite(message.trialAvatarInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, AvatarSkillInfo> skill_map = 10; */
        for (let k of Object.keys(message.skillMap)) {
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            AvatarSkillInfo.internalBinaryWrite(message.skillMap[k as any], writer, options);
            writer.join().join();
        }
        /* uint32 skill_depot_id = 11; */
        if (message.skillDepotId !== 0)
            writer.tag(11, WireType.Varint).uint32(message.skillDepotId);
        /* AvatarFetterInfo fetter_info = 12; */
        if (message.fetterInfo)
            AvatarFetterInfo.internalBinaryWrite(message.fetterInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* uint32 core_proud_skill_level = 13; */
        if (message.coreProudSkillLevel !== 0)
            writer.tag(13, WireType.Varint).uint32(message.coreProudSkillLevel);
        /* repeated uint32 inherent_proud_skill_list = 14; */
        if (message.inherentProudSkillList.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.inherentProudSkillList.length; i++)
                writer.uint32(message.inherentProudSkillList[i]);
            writer.join();
        }
        /* map<uint32, uint32> skill_level_map = 15; */
        for (let k of Object.keys(message.skillLevelMap))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.skillLevelMap[k as any]).join();
        /* AvatarExpeditionState expedition_state = 16; */
        if (message.expeditionState !== 0)
            writer.tag(16, WireType.Varint).int32(message.expeditionState);
        /* map<uint32, uint32> proud_skill_extra_level_map = 17; */
        for (let k of Object.keys(message.proudSkillExtraLevelMap))
            writer.tag(17, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.proudSkillExtraLevelMap[k as any]).join();
        /* bool is_focus = 18; */
        if (message.isFocus !== false)
            writer.tag(18, WireType.Varint).bool(message.isFocus);
        /* uint32 avatar_type = 19; */
        if (message.avatarType !== 0)
            writer.tag(19, WireType.Varint).uint32(message.avatarType);
        /* repeated uint32 team_resonance_list = 20; */
        if (message.teamResonanceList.length) {
            writer.tag(20, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.teamResonanceList.length; i++)
                writer.uint32(message.teamResonanceList[i]);
            writer.join();
        }
        /* uint32 wearing_flycloak_id = 21; */
        if (message.wearingFlycloakId !== 0)
            writer.tag(21, WireType.Varint).uint32(message.wearingFlycloakId);
        /* repeated AvatarEquipAffixInfo equip_affix_list = 22; */
        for (let i = 0; i < message.equipAffixList.length; i++)
            AvatarEquipAffixInfo.internalBinaryWrite(message.equipAffixList[i], writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* uint32 born_time = 23; */
        if (message.bornTime !== 0)
            writer.tag(23, WireType.Varint).uint32(message.bornTime);
        /* repeated uint32 pending_promote_reward_list = 24; */
        if (message.pendingPromoteRewardList.length) {
            writer.tag(24, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.pendingPromoteRewardList.length; i++)
                writer.uint32(message.pendingPromoteRewardList[i]);
            writer.join();
        }
        /* uint32 costume_id = 25; */
        if (message.costumeId !== 0)
            writer.tag(25, WireType.Varint).uint32(message.costumeId);
        /* AvatarExcelInfo excel_info = 26; */
        if (message.excelInfo)
            AvatarExcelInfo.internalBinaryWrite(message.excelInfo, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* uint32 anim_hash = 27; */
        if (message.animHash !== 0)
            writer.tag(27, WireType.Varint).uint32(message.animHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AvatarInfo
 */
export const AvatarInfo = new AvatarInfo$Type();
