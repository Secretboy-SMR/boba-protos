// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,output_typescript,// @generated from protobuf file "ClientGadgetInfo.proto" (syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ClientGadgetInfo
 */
export interface ClientGadgetInfo {
    /**
     * @generated from protobuf field: uint32 camp_id = 1;
     */
    campId: number;
    /**
     * @generated from protobuf field: uint32 camp_type = 2;
     */
    campType: number;
    /**
     * @generated from protobuf field: uint64 guid = 3;
     */
    guid: bigint;
    /**
     * @generated from protobuf field: uint32 owner_entity_id = 4;
     */
    ownerEntityId: number;
    /**
     * @generated from protobuf field: uint32 target_entity_id = 5;
     */
    targetEntityId: number;
    /**
     * @generated from protobuf field: bool async_load = 6;
     */
    asyncLoad: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientGadgetInfo$Type extends MessageType<ClientGadgetInfo> {
    constructor() {
        super("ClientGadgetInfo", [
            { no: 1, name: "camp_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "camp_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "guid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "owner_entity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "target_entity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "async_load", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ClientGadgetInfo>): ClientGadgetInfo {
        const message = { campId: 0, campType: 0, guid: 0n, ownerEntityId: 0, targetEntityId: 0, asyncLoad: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientGadgetInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientGadgetInfo): ClientGadgetInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 camp_id */ 1:
                    message.campId = reader.uint32();
                    break;
                case /* uint32 camp_type */ 2:
                    message.campType = reader.uint32();
                    break;
                case /* uint64 guid */ 3:
                    message.guid = reader.uint64().toBigInt();
                    break;
                case /* uint32 owner_entity_id */ 4:
                    message.ownerEntityId = reader.uint32();
                    break;
                case /* uint32 target_entity_id */ 5:
                    message.targetEntityId = reader.uint32();
                    break;
                case /* bool async_load */ 6:
                    message.asyncLoad = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientGadgetInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 camp_id = 1; */
        if (message.campId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.campId);
        /* uint32 camp_type = 2; */
        if (message.campType !== 0)
            writer.tag(2, WireType.Varint).uint32(message.campType);
        /* uint64 guid = 3; */
        if (message.guid !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.guid);
        /* uint32 owner_entity_id = 4; */
        if (message.ownerEntityId !== 0)
            writer.tag(4, WireType.Varint).uint32(message.ownerEntityId);
        /* uint32 target_entity_id = 5; */
        if (message.targetEntityId !== 0)
            writer.tag(5, WireType.Varint).uint32(message.targetEntityId);
        /* bool async_load = 6; */
        if (message.asyncLoad !== false)
            writer.tag(6, WireType.Varint).bool(message.asyncLoad);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClientGadgetInfo
 */
export const ClientGadgetInfo = new ClientGadgetInfo$Type();
