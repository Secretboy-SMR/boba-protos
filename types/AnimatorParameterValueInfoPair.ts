// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,output_typescript,// @generated from protobuf file "AnimatorParameterValueInfoPair.proto" (syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AnimatorParameterValueInfo } from "./AnimatorParameterValueInfo";
/**
 * @generated from protobuf message AnimatorParameterValueInfoPair
 */
export interface AnimatorParameterValueInfoPair {
    /**
     * @generated from protobuf field: int32 name_id = 1;
     */
    nameId: number;
    /**
     * @generated from protobuf field: AnimatorParameterValueInfo animator_para = 2;
     */
    animatorPara?: AnimatorParameterValueInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class AnimatorParameterValueInfoPair$Type extends MessageType<AnimatorParameterValueInfoPair> {
    constructor() {
        super("AnimatorParameterValueInfoPair", [
            { no: 1, name: "name_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "animator_para", kind: "message", T: () => AnimatorParameterValueInfo }
        ]);
    }
    create(value?: PartialMessage<AnimatorParameterValueInfoPair>): AnimatorParameterValueInfoPair {
        const message = { nameId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnimatorParameterValueInfoPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnimatorParameterValueInfoPair): AnimatorParameterValueInfoPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 name_id */ 1:
                    message.nameId = reader.int32();
                    break;
                case /* AnimatorParameterValueInfo animator_para */ 2:
                    message.animatorPara = AnimatorParameterValueInfo.internalBinaryRead(reader, reader.uint32(), options, message.animatorPara);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnimatorParameterValueInfoPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 name_id = 1; */
        if (message.nameId !== 0)
            writer.tag(1, WireType.Varint).int32(message.nameId);
        /* AnimatorParameterValueInfo animator_para = 2; */
        if (message.animatorPara)
            AnimatorParameterValueInfo.internalBinaryWrite(message.animatorPara, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AnimatorParameterValueInfoPair
 */
export const AnimatorParameterValueInfoPair = new AnimatorParameterValueInfoPair$Type();
