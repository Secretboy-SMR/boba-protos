// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,output_typescript,// @generated from protobuf file "TrialAvatarInfo.proto" (syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TrialAvatarGrantRecord } from "./TrialAvatarGrantRecord";
import { Item } from "./Item";
/**
 * @generated from protobuf message TrialAvatarInfo
 */
export interface TrialAvatarInfo {
    /**
     * @generated from protobuf field: uint32 trial_avatar_id = 1;
     */
    trialAvatarId: number;
    /**
     * @generated from protobuf field: repeated Item trial_equip_list = 2;
     */
    trialEquipList: Item[];
    /**
     * @generated from protobuf field: TrialAvatarGrantRecord grant_record = 3;
     */
    grantRecord?: TrialAvatarGrantRecord;
}
// @generated message type with reflection information, may provide speed optimized methods
class TrialAvatarInfo$Type extends MessageType<TrialAvatarInfo> {
    constructor() {
        super("TrialAvatarInfo", [
            { no: 1, name: "trial_avatar_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "trial_equip_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item },
            { no: 3, name: "grant_record", kind: "message", T: () => TrialAvatarGrantRecord }
        ]);
    }
    create(value?: PartialMessage<TrialAvatarInfo>): TrialAvatarInfo {
        const message = { trialAvatarId: 0, trialEquipList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrialAvatarInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrialAvatarInfo): TrialAvatarInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 trial_avatar_id */ 1:
                    message.trialAvatarId = reader.uint32();
                    break;
                case /* repeated Item trial_equip_list */ 2:
                    message.trialEquipList.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* TrialAvatarGrantRecord grant_record */ 3:
                    message.grantRecord = TrialAvatarGrantRecord.internalBinaryRead(reader, reader.uint32(), options, message.grantRecord);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrialAvatarInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 trial_avatar_id = 1; */
        if (message.trialAvatarId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.trialAvatarId);
        /* repeated Item trial_equip_list = 2; */
        for (let i = 0; i < message.trialEquipList.length; i++)
            Item.internalBinaryWrite(message.trialEquipList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* TrialAvatarGrantRecord grant_record = 3; */
        if (message.grantRecord)
            TrialAvatarGrantRecord.internalBinaryWrite(message.grantRecord, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TrialAvatarInfo
 */
export const TrialAvatarInfo = new TrialAvatarInfo$Type();
