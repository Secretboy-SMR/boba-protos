// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,output_typescript,// @generated from protobuf file "ScenePlayerInfo.proto" (syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { OnlinePlayerInfo } from "./OnlinePlayerInfo";
/**
 * @generated from protobuf message ScenePlayerInfo
 */
export interface ScenePlayerInfo {
    /**
     * @generated from protobuf field: uint32 uid = 1;
     */
    uid: number;
    /**
     * @generated from protobuf field: uint32 peer_id = 2;
     */
    peerId: number;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: bool is_connected = 4;
     */
    isConnected: boolean;
    /**
     * @generated from protobuf field: uint32 scene_id = 5;
     */
    sceneId: number;
    /**
     * @generated from protobuf field: OnlinePlayerInfo online_player_info = 6;
     */
    onlinePlayerInfo?: OnlinePlayerInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayerInfo$Type extends MessageType<ScenePlayerInfo> {
    constructor() {
        super("ScenePlayerInfo", [
            { no: 1, name: "uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "peer_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "scene_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "online_player_info", kind: "message", T: () => OnlinePlayerInfo }
        ]);
    }
    create(value?: PartialMessage<ScenePlayerInfo>): ScenePlayerInfo {
        const message = { uid: 0, peerId: 0, name: "", isConnected: false, sceneId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayerInfo): ScenePlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 uid */ 1:
                    message.uid = reader.uint32();
                    break;
                case /* uint32 peer_id */ 2:
                    message.peerId = reader.uint32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* bool is_connected */ 4:
                    message.isConnected = reader.bool();
                    break;
                case /* uint32 scene_id */ 5:
                    message.sceneId = reader.uint32();
                    break;
                case /* OnlinePlayerInfo online_player_info */ 6:
                    message.onlinePlayerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.onlinePlayerInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 uid = 1; */
        if (message.uid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.uid);
        /* uint32 peer_id = 2; */
        if (message.peerId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.peerId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* bool is_connected = 4; */
        if (message.isConnected !== false)
            writer.tag(4, WireType.Varint).bool(message.isConnected);
        /* uint32 scene_id = 5; */
        if (message.sceneId !== 0)
            writer.tag(5, WireType.Varint).uint32(message.sceneId);
        /* OnlinePlayerInfo online_player_info = 6; */
        if (message.onlinePlayerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.onlinePlayerInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ScenePlayerInfo
 */
export const ScenePlayerInfo = new ScenePlayerInfo$Type();
